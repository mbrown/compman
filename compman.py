'''
CompMan computation manager.

Creator: Matthew Brown
Started: 2015-04-13
'''

version = '0.1.0'

import os
import inspect
from collections import OrderedDict

class NotCodedYetException(Exception):
    def __init__(self,*args,**kwargs):
        Exception.__init__(self,*args,**kwargs)

class InvalidMetaparameterError(Exception):
    def __init__(self,compman_metaparameter,*args,**kwargs):
        msg = 'Invalid compman_metaparameter value: {}'.format(compman_metaparameter)
        Exception.__init__(self,msg,*args,**kwargs)

class InvalidStateError(Exception):
    def __init__(self,msg=None):
        if msg is None:
            msg = 'One or more required member objects is set incorrectly'
        Exception.__init__(self,msg)

class CompMan(object):
    '''
    CompMan computation manager:

    ----------
    __init__() input arguments:

    compman_description
      - simple description string to make directory and file lists easier
      to view, eg: 'analysis', 'residuals', 'raw'

    compman_codetag
      - code tag string
      - should indicate the Python file currently executing (with .py or
      .pyc extension removed) as well as the relevant class of function
      eg: analysiscode_TestMan

    compman_metaparameter
      - string, used to set many parameters by specifying just one
      metaparameter

    compman_tagseparator (optional)
      - separator character used in output directory and file names
      - defaults to '.'

    compman_basepath (optional)
      - base path where manifest files will be stored, output
      subdirectory name autogenerated and then appended to basepath
      - defaults to None
      - basepath not part of core config (i.e. config that is hashed
      and defines output identity)
      - if no files are to be stored on disk, this can be None
      eg: if the child class just specifies a list of subjects

    compman_dependencies (optional)
      - list of other CompMan children instances that the current
      instance needs to do its computation

    ----------
    Generated members:

    compman_configdict
      - core configuration parameters stored in an OrderedDict (from
      collections module)
      - generated by self.generateConfigDict(), which child classes must
      call and extend
      - first four keys are always: compman_description,
      compman_codetag, compman_metaparameter, compman_tagseparator
      - Defines core configuration parameters that identify the
      computation. Does not include incidental parameters that one may
      wish to associate with the computation (eg: date, location of
      scratch directories). Definition of 'core' and 'non-core'
      configuration parameters depends on the application and style
      considerations, in some cases.

    compman_hashtag
      - generated from compman_config: key-value pairs first
      combined in a CSV string, then hash applied to that string

    ----------
    Other compman things generated on-the-fly and not stored:

    compman_tagprefix
      - from generateTagprefix()
      - tag prefix used in output directory and file names.
        tagprefix has the form:
        <compman_description tsep compman_codetag tsep \\
         compman_metaparameter tsep compman_hashtag>
        where tsep is the compman_tagseparator (default '.')
        eg: 'analysis.AnalysisCode.test_20150601.123456789'

    compman_manifestpath
      - from getManifestPath()
      - generated from compman_basepath, compman_description, and
        compman_tagprefix
      - location where delivered manifest files is stored
      - delivered manifest may be generated by the code in the child
      class or else simply 'pointed to' by that code, eg: in the case
      of raw data

    ----------
    Child classes of CompMan must:
      1. In __init__():
         Must call first CompMan.__init__()
         Must include these lines:
         1. self.compman_configdict = self.generateConfigDict()
         2. If using compman_dependencies, must call:
            self.updateConfigDictFromDependencies()
         3. self.compman_hashtag    = self.generateHashtag()
      2. Define generateConfigDict(), which must call and extend
         CompMan.generateConfigDict()
      3. Implement generateManifestFilesList(), if needed
    '''

    def __init__(self,compman_description,
                      compman_codetag,
                      compman_metaparameter,
                      compman_tagseparator   = '.',
                      compman_basepath       = None,
                      compman_dependencies   = None):
        self.compman_description    = compman_description
        self.compman_codetag        = compman_codetag 
        self.compman_metaparameter  = compman_metaparameter
        self.compman_tagseparator   = compman_tagseparator
        self.compman_configdict     = None
        self.compman_hashtag        = None
        self.compman_basepath       = compman_basepath
        self.compman_dependencies   = compman_dependencies
        # To be called by child class's __init__():
        #self.compman_configdict     = self.generateConfigDict()
        #self.compman_hashtag        = self.generateHashTag()

    # --------------------
    # Getters:
    def getCompManDescription(self):
        return self.compman_description

    def getCompManCodeTag(self):
        return self.compman_codetag 

    def getCompManMetaParameter(self):
        return self.compman_metaparameter

    def getCompManTagSeparator(self):
        return self.compman_tagseparator

    def getCompManConfigDict(self):
        return self.compman_configdict

    def getCompManHashTag(self):
        return self.compman_hashtag

    def getCompManBasePath(self):
        return self.compman_basepath

    # --------------------
    # Functions for generating stuff:
    def generateBasicConfigDictFromMembers(self):
        '''
        Calls self.generateBasicConfigDict(...) using members as input:
        Following must be defined:
        self.compman_description
        self.compman_codetag
        self.compman_metaparameter
        self.compman_tagseparator
        '''
        if self.compman_description is None or self.compman_codetag is None or self.compman_metaparameter is None or self.compman_tagseparator is None:
            raise InvalidStateError()
        return self.generateBasicConfigDict(self.compman_description,self.compman_codetag,self.compman_metaparameter,self.compman_tagseparator)

    def generateBasicConfigDict(self,compman_description,compman_codetag,compman_metaparameter,compman_tagseparator):
        '''
        Returns an OrderedDict (from the collections module).

        Child classes must define a generateConfigdict that first calls
        and then extends this function.
        
        First four keys in configDict are always: compman_description,
        compman_codetag, compman_metaparameter, compman_tagseparator

        Basic configDict has these first four keys:
        compman_description
        compman_codetag 
        compman_metaparameter
        compman_tagseparator
        '''
        configDict = OrderedDict()
        configDict['compman_description']   = compman_description
        configDict['compman_codetag']       = compman_codetag 
        configDict['compman_metaparameter'] = compman_metaparameter
        configDict['compman_tagseparator']  = compman_tagseparator
        return configDict

    def updateConfigDictFromDependencies(self,compman_configdict,compman_dependencies):
        '''
        Returns compman_configdict updated based on CompMan object dependencies.
        compman_configdict:   OrderedDict
        compman_dependencies: list of CompMan objects
        Child classes of CompMan must call this in their __init__()
        if they populate self.compman_dependencies
        '''
        for (index,man) in enumerate(compman_dependencies):
            for key in ('compman_description','compman_codetag','compman_metaparameter','compman_tagseparator'):
                compoundKey = 'dependency{0:03}_{1}'.format(index,key)
                compman_configdict[compoundKey] = man.getCompManConfigDict()[key]
            compoundKey = 'dependency{0:03}_compman_hashtag'.format(index)
            compman_configdict[compoundKey] = man.getCompManHashTag()
        return compman_configdict

    def generateCompoundMetaParameter(self,local_metaparameter,dependencies):
        '''
        Used for combining local metaparameter and dependency
        metaparameters into a short compound_metaparameter,
        while avoiding arbitrary growth in metaparameter length that
        would happen if we simply concatenated all dependency
        metaparameters.
        local_metaparameter : string
        dependencies        : list of CompMan objects
        Returns compound_metaparameter
        '''
        string = ''
        for man in dependencies:
            string += '_' + man.getCompManMetaParameter()
        return local_metaparameter + '_' + str(self.hashOnString(string,alg='short'))

    def generateCSVConfigString(self,compman_configdict):
        string = ''
        for (key,val) in self.compman_configdict.viewitems():
            string += (str(key) + ',' + str(val) + '\n')
        return string

    def generateHashTagFromMembers(self):
        if self.compman_configdict is None:
            raise InvalidStateError('self.compman_configdict must be an OrderedDict, not None)')
        return self.generateHashTag(self.compman_configdict)

    def generateHashTag(self,compman_configdict):
        return str(self.hashOnString(self.generateCSVConfigString(compman_configdict)))

    def hashOnString(self,string,alg='djb2'):
        '''
        Creates a hash number from string.
        Algorithm alg choices:
            'djb2' (default)
            'sdbm'
        Returns hash number
        '''
        if alg == 'djb2':
            hashnum = 5381
            modulus = 2**32-1
            for c in string:
                hashnum = (hashnum * 33 + ord(c)) % modulus
        elif alg == 'short':
            hashnum = 5381
            modulus = 2**16-1
            for c in string:
                hashnum = (hashnum * 33 + ord(c)) % modulus
        elif alg == 'sdbm':
            hashnum = 0
            modulus = 2**32-1
            for c in string:
                hashnum = (hashnum * 65599 + ord(c)) % modulus
        else:
            raise Exception('Invalid hash algorith: {}'.format(alg))
        return hashnum

    def getTagPrefix(self):
        '''
        Return tag prefix used in output directory and file names.
        Prefix has the form:
        compman_description tsep compman_codetag tsep compman_metaparameter tsep compman_hashtag
        where tsep is the compman_tagseparator (default '.')
        eg: 'analysis.AnalysisCode.test_20150601.123456789'
        '''
        return self.compman_tagseparator.join([self.compman_description,self.compman_codetag,self.compman_metaparameter,self.compman_hashtag])

    def getManifestPath(self):
        if self.compman_basepath is None:
            raise TypeError('self.compman_basepath must be a string, not None')
        dirname = self.generateTagPrefix()
        return os.path.join(self.compman_basepath,self.compman_description,dirname)

    def getManifestFilesList(self):
        '''
        Must be implemented by child class.
        Return a list of filename or filepaths.
        '''
        raise NotImplementedError()

def getCurrentCodeFile(keepExtension=False):
    '''
    Supposed to return filename (minus extension) of code. Not fully implmented yet.
    '''
    raise Exception("Not fully implemented - always return 'compman'")
    if keepExtension:
        return os.path.split(inspect.getfile(inspect.currentframe()))[1] # code filename (usually with path)
    else:
        return os.path.splitext(os.path.split(inspect.getfile(inspect.currentframe()))[1])[0] # code filename (usually with path)

if __name__ == '__main__':
    print(getCurrentCodeFile())
